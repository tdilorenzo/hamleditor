<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Package.LanguageService.9.0</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Package.AuthoringScope">
      <summary>Encapsulates information about the source as obtained from a parsing operation.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.AuthoringSink">
      <summary>This class is used by the parser to gather information about the source being parsed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.AuthoringSink.MatchMultiple(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32)"></member>
    <member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.#ctor(Microsoft.VisualStudio.Package.LanguageService,Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow,Microsoft.VisualStudio.Package.Source)">
      <summary>Initializes the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> class.</summary>
      <param name="service">[in] The <see cref="T:Microsoft.VisualStudio.Package.LanguageService" /> object representing the language service.</param>
      <param name="codeWindow">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" /> object supplied by Visual Studio that is to be managed by the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> class.</param>
      <param name="source">[in] The <see cref="T:Microsoft.VisualStudio.Package.Source" /> object associated with the source file to be shown in the code window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.AddAdornments">
      <summary>Called to add adornments or additional user interface (UI) elements to the text view.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.Close">
      <summary>Close down the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> object.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.CodeWindowManager.CodeWindow">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" /> this <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> is managing.</summary>
      <returns>Always returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" /> supplied to the constructor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.CodeWindowManager.DropDownHelper">
      <summary>Returns the drop-down helper class.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars" /> object or returns a null value if there are no drop-down bars.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.Finalize">
      <summary>The destructor for the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.GetFilter(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.Package.ViewFilter" /> object associated with the specified text view.</summary>
      <returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.ViewFilter" /> object; otherwise, returns a null value (the specified text view does not have a view filter in this language service).</returns>
      <param name="view">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object for which to retrieve the associated <see cref="T:Microsoft.VisualStudio.Package.ViewFilter" /> object.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.CodeWindowManager.LanguageService">
      <summary>Returns the language service that owns this code window manager.</summary>
      <returns>Returns the <see cref="T:Microsoft.VisualStudio.Package.LanguageService" /> object given to the constructor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.OnKillFocus(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Called when the specified text view loses focus.</summary>
      <param name="textView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> representing the text view that is losing focus.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.OnNewView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Called when a new text view is created.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="newView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the new text view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.OnSetFocus(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Called when the specified text view receives the focus.</summary>
      <param name="textView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that received the focus.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.CodeWindowManager.Properties">
      <summary>Allows retrieving and updating the document properties.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties" /> object obtained in the constructor through a call to the <see cref="M:Microsoft.VisualStudio.Package.LanguageService.CreateDocumentProperties(Microsoft.VisualStudio.Package.CodeWindowManager)" /> method.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.RemoveAdornments">
      <summary>Called to remove any adornments on a text view that is being closed.</summary>
      <returns>If successful, this method returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, this method returns an error code.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.CodeWindowManager.Source">
      <summary>Returns the Source object associated with the view managed by this code window manager class.</summary>
      <returns>Returns the <see cref="T:Microsoft.VisualStudio.Package.Source" /> object that was passed to the constructor.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ColorableItem">
      <summary>Provides a default implementation of the VSIP interface <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.#ctor(Microsoft.VisualStudio.Package.LanguageService,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.Package.IScanner)">
      <summary>Initializes the <see cref="T:Microsoft.VisualStudio.Package.Colorizer" /> class.</summary>
      <param name="svc">[in] The language service.</param>
      <param name="buffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object that serves as the buffer for the colorizer.</param>
      <param name="scanner">[in] The <see cref="T:Microsoft.VisualStudio.Package.IScanner" /> object that handles all parsing operations associated with syntax highlighting.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.CloseColorizer">
      <summary>Called when the colorizer is disposed of.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.ColorizeLine(System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32[])">
      <summary>Obtains color and font attribute information for each character in the specified line of text.</summary>
      <returns>Returns the updated state value.</returns>
      <param name="line">[in] The line number from which the line of text came from.</param>
      <param name="length">[in] The number of characters in the given text.</param>
      <param name="ptr">[in] An unmarshaled pointer to a line of text.</param>
      <param name="state">[in] The current state as maintained by the parser.</param>
      <param name="attrs">[in, out] An array that is filled in with indices into the <see cref="M:Microsoft.VisualStudio.Package.LanguageService.GetColorableItem(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem@)" /> list as maintained by the <see cref="T:Microsoft.VisualStudio.Package.LanguageService" /> class.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.Dispose">
      <summary>Disposes the object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.Finalize">
      <summary>Called when the object is about to be destroyed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.GetColorInfo(System.String,System.Int32,System.Int32)">
      <summary>Returns the parsing state at the end of the line without returning any colorization information.</summary>
      <returns>Returns the parsing state at the end of the line.</returns>
      <param name="line">[in] The text of the line.</param>
      <param name="length">[in] The length of the line.</param>
      <param name="state">[in] The initial parsing state of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.GetLineInfo(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextColorState)">
      <summary>Returns color information about the specified line.</summary>
      <returns>If successful, returns an array of <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> objects describing each token on the line; otherwise, returns a null value.</returns>
      <param name="buffer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object containing the entire source file.</param>
      <param name="line">[in] The index of the line for which to get color information.</param>
      <param name="colorState">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextColorState" /> object from which cached state information can be obtained for a line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.GetStartState(System.Int32@)">
      <summary>Returns the initial parsing state.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="start">[out] Returns the initial parsing state.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.GetStateAtEndOfLine(System.Int32,System.Int32,System.IntPtr,System.Int32)">
      <summary>Returns the parsing state at the end of the specified line.</summary>
      <returns>Returns the parsing state at the end of the line.</returns>
      <param name="line">[in] The line number from where the text came from.</param>
      <param name="length">[in] The length of the text to examine.</param>
      <param name="ptr">[in] An unmarshaled pointer to the text. The example in <see cref="M:Microsoft.VisualStudio.Package.Colorizer.ColorizeLine(System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32[])" /> shows how to marshal this pointer to a string.</param>
      <param name="state">[in] The parsing state at the beginning of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.GetStateMaintenanceFlag(System.Int32@)">
      <summary>Called to determine if the colorizer requires per line state management.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="flag">[out] Returns nonzero if the colorizer requires parsing state to be tracked per line; otherwise, returns zero.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.Resume">
      <summary>Called to resume use of the colorizer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Colorizer.Scanner">
      <summary>Returns the scanner being used.</summary>
      <returns>Returns an <see cref="T:Microsoft.VisualStudio.Package.IScanner" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Colorizer.Suspend">
      <summary>Called to suspend use of the colorizer.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.CommentInfo">
      <summary>Provides the characters that define comments for a language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.#ctor(System.Windows.Forms.ImageList,Microsoft.VisualStudio.Package.Source)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.CompletionSet" /> class.</summary>
      <param name="imageList">[in] An <see cref="T:System.Windows.Forms.ImageList" /> object containing the images to be used in the completion list display. This cannot be null. It can however, be an empty list..</param>
      <param name="source">[in] A <see cref="T:Microsoft.VisualStudio.Package.Source" /> object representing the source file to be affected by the completion list. This cannot be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.Close">
      <summary>Closes the completion list display.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.CompareItems(System.String,System.String,System.Int32,System.Int32@)">
      <summary>Compares two strings for the specified number of characters.</summary>
      <returns>If the method is successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code (in which case the default comparison is used).</returns>
      <param name="bstrSoFar">The first string to compare.</param>
      <param name="bstrOther">The second string to compare.</param>
      <param name="lCharactersToCompare">The number of characters to compare.</param>
      <param name="plResult">[out] The result of the comparison.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.CompletionSet.Declarations">
      <summary>Gets or sets the <see cref="T:Microsoft.VisualStudio.Package.Declarations" /> object this completion set uses.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.Declarations" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.DecreaseFilterLevel(System.Int32)">
      <summary>Changes the level of the internal filter list and updates it, showing common items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iSelectedItem">The index of the item that is currently selected.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.Dismiss">
      <summary>Called when the completion list is no longer needed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.Dispose">
      <summary>Deallocates any resources just before the <see cref="T:Microsoft.VisualStudio.Package.CompletionSet" /> object is destroyed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetBestMatch(System.String,System.Int32,System.Int32@,System.UInt32@)">
      <summary>Determines which item in the list is the best match for the text typed so far by the user.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="textSoFar">[in] The text that has been typed by the user.</param>
      <param name="length">[in] The length of the text typed by the user.</param>
      <param name="index">[out] Returns the index of the item in the <see cref="T:Microsoft.VisualStudio.Package.Declarations" /> object that best matches the typed text.</param>
      <param name="flags">[out] Returns a set of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetCompletionItemColor(System.Int32,System.UInt32@,System.UInt32@)">
      <summary>Gets the foreground and background colors for a selected item. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK if there are colors set, S_FALSE if the defaults are used" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">The index of the item for which to get the colors.</param>
      <param name="dwFGColor">[out] Returns the foreground color.</param>
      <param name="dwBGColor">[out] Returns the background color.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetCount">
      <summary>Gets the number of items that can be displayed in the completion list.</summary>
      <returns>The number of items to be displayed.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetDescriptionText(System.Int32,System.String@)">
      <summary>Gets a description for the specified item in the completion list.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error.</returns>
      <param name="index">[in] The index of the item for which to get a description.</param>
      <param name="description">[out] Returns the description, or null if there is no description.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetDisplayText(System.Int32,System.String@,System.Int32[])">
      <summary>Gets the text and image index to display in the completion list for the specified item.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="index">[in] The index of the item for which to get the display text and image.</param>
      <param name="text">[out] Returns the display text, or null if there is no display text.</param>
      <param name="glyph">[in, out] Returns the index of the image to display, or -1 if no image is to be displayed. This parameter can be null, indicating the caller does not want the image index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetFilterLevel(System.Int32@)">
      <summary>Gets the current filter level.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If there is no filter, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />; otherwise, returns an error code.</returns>
      <param name="iFilterLevel">[out] Returns the filter level.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetFlags">
      <summary>Gets a set of flags specifying the behavior of the completion list.</summary>
      <returns>A set of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags" /> enumeration; specifically, from the CSF_* group.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetImageList(System.IntPtr@)">
      <summary>Returns the image list to use for the glyphs in the completion list.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="phImages">[out] Returns the handle to an image list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetInitialExtent(System.Int32@,System.Int32@,System.Int32@)">
      <summary>Gets the initial extent of the text to be completed.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="line">[out] Returns the line number the text is on.</param>
      <param name="startIdx">[out] Returns the character offset of the first character of the text.</param>
      <param name="endIdx">[out] Returns the character offset of the last character of the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.IncreaseFilterLevel(System.Int32)">
      <summary>Show in the completion list the members of the specified type. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iSelectedItem">The index of the selected item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.Init(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.Declarations,System.Boolean)">
      <summary>Initializes the completion set object.</summary>
      <param name="textView">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that displays the source file.</param>
      <param name="declarations">[in] A <see cref="T:Microsoft.VisualStudio.Package.Declarations" /> object that manages the list of declarations to show in the completion list.</param>
      <param name="completeWord">[in] true if part of a word is to be completed, otherwise false (the user selected Complete Word from the IntelliSense menu with the caret not positioned immediately after any text. This displays all possible completions).</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.CompletionSet.IsCommitted">
      <summary>Gets whether any text has been committed to the source file.</summary>
      <returns>true if text has been committed to the source file, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.CompletionSet.IsDisplayed">
      <summary>Gets whether the completion list is currently displayed.</summary>
      <returns>Set to true if the completion list is displayed, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.OnAutoComplete">
      <summary>Called after completion text has been committed to the source file.</summary>
      <returns>A character to be inserted after the committed text, or 0 if no character is to be inserted.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.OnCommit(System.String,System.Int32,System.Int32,System.UInt16,System.String@)">
      <summary>Gets the text to be inserted into the source file if the specified character is a commit character.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If the <paramref name="commitChar" /> parameter is not a commit character, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> (do not commit the text to the source file); otherwise, returns an error code.</returns>
      <param name="textSoFar">[in] A string containing the text that has been typed so far by the user.</param>
      <param name="index">[in] The index of the item in the completion list that is currently selected.</param>
      <param name="selected">[in] Nonzero if an item is selected in the completion list (the index of the selected item is in the <paramref name="index" /> parameter). If this parameter is zero, the <paramref name="index" /> parameter is to be ignored.</param>
      <param name="commitChar">[in] The typed character that triggered the completion list.</param>
      <param name="completeWord">[out] Returns the string to insert in the source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompletionSet.OnCommitComplete">
      <summary>Called after the text has been committed.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.CompletionSet.OnCommitText">
      <summary>Gets the text that is to be committed to the source file.</summary>
      <returns>The text if there is anything to commit, otherwise null.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.#ctor(Microsoft.VisualStudio.Package.LanguageService,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.Completor" /> class.</summary>
      <param name="langsvc">[in] A <see cref="T:Microsoft.VisualStudio.Package.LanguageService" /> object.</param>
      <param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> representing the view currently being edited.</param>
      <param name="description">[in] A string used to describe the pending edit operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.Apply">
      <summary>Applies all changes made through the <see cref="T:Microsoft.VisualStudio.Package.Completor" /> object.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Completor.AtEndOfLine">
      <summary>Determines if the internal caret position is at the end of the current line.</summary>
      <returns>If the internal caret position is at the end of the line, returns true; otherwise, returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.Dispose">
      <summary>Cleans up any allocations made just before the object is destroyed.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Completor.IsExpansionActive">
      <summary>Determines if a code snippet is being edited.</summary>
      <returns>If a code snippet is being edited, returns true; otherwise, returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.RefreshLine">
      <summary>Obtains the current line of text from the <see cref="T:Microsoft.VisualStudio.Package.Source" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.TypeBackspace(System.Int32)">
      <summary>Performs the specified number of backspaces on the line being edited and updates the internal caret position.</summary>
      <param name="len">[in] The number of backspaces to perform.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.TypeChar(System.Char)">
      <summary>Inserts the specified character and updates the internal caret position.</summary>
      <param name="ch">[in] The character to insert.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.TypeChars(System.String)">
      <summary>Inserts the specified string of characters and updates internal caret position.</summary>
      <param name="s">[in] A string containing the characters to insert.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.TypeDelete(System.Int32)">
      <summary>Performs the specified number of delete operations on the line being edited.</summary>
      <param name="len">[in] The number of delete operations to perform.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.TypeLeft(System.Int32)">
      <summary>Moves the internal caret position the specified number of positions to the left.</summary>
      <param name="len">[in] The number of positions to move to the left.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Completor.TypeRight(System.Int32)">
      <summary>Moves the internal caret position the specified number of positions to the right.</summary>
      <param name="len">[in] The number of positions to move to the right.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundAction.#ctor(Microsoft.VisualStudio.Package.Source,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.CompoundAction" /> class.</summary>
      <param name="src">[in] The <see cref="T:Microsoft.VisualStudio.Package.Source" /> object that represents the source file to be edited.</param>
      <param name="description">[in] A string containing a description to label the undo action.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundAction.Abort">
      <summary>Terminates the current compound action, throwing away all edits.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundAction.Close">
      <summary>Closes the compound action and commits all edits to the source file.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundAction.FlushEditActions">
      <summary>Flushes any pending edit actions from the current compound action.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.CompoundActionBase">
      <summary>Used to create CompoundAction objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundActionBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.CompoundActionBase" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundActionBase.Abort">
      <summary>Terminates the current compound action, throwing away all edits.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.CompoundActionBase.action">
      <summary>Interface for a CompoundAction action.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundActionBase.Close">
      <summary>Close the compound action and commits all edits to the source file.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundActionBase.Dispose">
      <summary>Deallocates any resources just before the <see cref="T:Microsoft.VisualStudio.Package.CompoundAction" /> object is destroyed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundActionBase.FlushEditActions">
      <summary>Flushes any pending edit actions from the current compound action.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.CompoundActionBase.opened">
      <summary>Specifies if a compound action has been opened.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.CompoundActionFactory">
      <summary>Creates <see cref="T:Microsoft.VisualStudio.Package.CompoundAction" /> objects based on specific source files and views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundActionFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.CompoundActionFactory" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundActionFactory.GetCompoundAction(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.Source,System.String)">
      <summary>Creates a <see cref="T:Microsoft.VisualStudio.Package.CompoundAction" /> object based on a view or specified source.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Package.CompoundAction" /> object.</returns>
      <param name="view">A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> representation of the view.</param>
      <param name="src">A <see cref="T:Microsoft.VisualStudio.Package.Source" /> object representing a source file.</param>
      <param name="description">A string value describing the <see cref="T:Microsoft.VisualStudio.Package.CompoundAction" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.CompoundViewAction.#ctor(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.CompoundViewAction" /> class.</summary>
      <param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that is to receive the edit events.</param>
      <param name="description">[in] A string containing a description to label the undo action.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Declarations.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.Declarations" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Declarations.Dispose">
      <summary>Frees any resources allocated by the class just before the class object is destroyed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Declarations.GetBestMatch(System.String,System.Int32@,System.Boolean@)">
      <summary>Determines the best completion match for the specified value.</summary>
      <param name="value">[in] The text to match against. This typically represents the text typed by the user.</param>
      <param name="index">[out] Returns the index of the item that best matches the value.</param>
      <param name="uniqueMatch">[out] Returns true if the best match is the only match and it matches the value exactly; otherwise, returns false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Declarations.GetCount">
      <summary>When implemented in a derived class, gets the number of items in the list of declarations.</summary>
      <returns>The count of items represented by this <see cref="T:Microsoft.VisualStudio.Package.Declarations" /> class.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Declarations.GetDescription(System.Int32)">
      <summary>When implemented in a derived class, gets a description of the specified item.</summary>
      <returns>If successful, returns the description; otherwise, returns null.</returns>
      <param name="index">[in] The index of the item for which to get the description.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Declarations.GetDisplayText(System.Int32)">
      <summary>When implemented in a derived class, gets the text to be displayed in the completion list for the specified item.</summary>
      <returns>The text to be displayed, otherwise null.</returns>
      <param name="index">[in] The index of the item for which to get the display text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Declarations.GetGlyph(System.Int32)">
      <summary>When implemented in a derived class, gets the image to show next to the specified item.</summary>
      <returns>The index of the image from an image list, otherwise -1.</returns>
      <param name="index">[in] The index of the item for which to get the image index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Declarations.GetInitialExtent(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Returns the initial extent of the text to be completed.</summary>
      <returns>If the initial extent was determined, returns true; otherwise, returns false.</returns>
      <param name="textView">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that displays the source file.</param>
      <param name="line">[out] The line number the caret is currently on.</param>
      <param name="startIdx">[out] The character offset on the line to the first character of the text that is to trigger the commit.</param>
      <param name="endIdx">[out] The character offset to the last character of the text that is to trigger the commit.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Declarations.GetName(System.Int32)">
      <summary>When implemented in a derived class, gets the name or text to be inserted for the specified item.</summary>
      <returns>If successful, returns the name of the item; otherwise, returns null.</returns>
      <param name="index">[in] The index of the item for which to get the name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Declarations.IsCommitChar(System.String,System.Int32,System.Char)">
      <summary>Determines whether the specified character can be used to complete the specified text.</summary>
      <returns>If the character is a commit character, returns true; otherwise, returns false.</returns>
      <param name="textSoFar">[in] A string containing the text typed by the user.</param>
      <param name="selected">[in] The number of characters that are currently selected or -1 if nothing is selected.</param>
      <param name="commitCharacter">[in] The character to determine is a completion character.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Declarations.IsMatch(System.String,System.Int32)">
      <summary>Determines whether the specified text matches some or all of the specified item.</summary>
      <returns>Returns true if the specified text is at the beginning of the specified item; otherwise, returns false.</returns>
      <param name="textSoFar">[in] A string containing the text typed by the user and to be matched.</param>
      <param name="index">[in] The index of the item to compare against.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Declarations.LastBestMatch">
      <summary>Gets or sets the name of the item that best matches what has been typed so far.</summary>
      <returns>If a best match has been set, returns a string containing the name of the item; otherwise, returns an empty string.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Declarations.OnAutoComplete(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.Char,System.Int32)">
      <summary>Called after the declaration has been committed to the source file. When implemented in a derived class, it provides a completion character which may itself be a trigger for another round of IntelliSense.</summary>
      <returns>Returns a character to be inserted after the committed text. If nothing is to be inserted, returns 0.</returns>
      <param name="textView">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that displays the source file.</param>
      <param name="committedText">[in] A string containing the text that was inserted as part of the completion process.</param>
      <param name="commitCharacter">[in] The character that was used to commit the text to the source file.</param>
      <param name="index">[in] The index of the item that was committed to the source file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Declarations.OnCommit(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.Char,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
      <summary>Called to commit the specified item to the source file.</summary>
      <returns>If successful, returns a string containing the text to commit to the source file; otherwise, returns null.</returns>
      <param name="textView">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that displays the source file.</param>
      <param name="textSoFar">[in] A string containing the text that has been typed by the user.</param>
      <param name="commitCharacter">[in] The character used to commit the text.</param>
      <param name="index">[in] The index of the item to commit to the source file.</param>
      <param name="initialExtent">[in, out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object specifying the text typed so far. Returns the span of the committed text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Declarations.IsPerfectMatch(System.String,System.Int32)"></member>
    <member name="M:Microsoft.VisualStudio.Package.DefaultFieldValue.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.DefaultFieldValue" /> class.</summary>
      <param name="field">[in] A string containing the name of the field.</param>
      <param name="value">[in] A string containing the value of the field.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DefaultFieldValue.Field">
      <summary>Returns the name of the field.</summary>
      <returns>Returns the name that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DefaultFieldValue" /> class constructor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.DefaultFieldValue.Value">
      <summary>Returns the value of the field.</summary>
      <returns>Returns the value that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DefaultFieldValue" /> class constructor.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.DocumentProperties">
      <summary>Provides support for document-specific properties associated with a language service.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.DocumentTask">
      <summary>Represents an item for a language service in the Error List Options window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.DropDownMember">
      <summary>Represents a single entry in a combo box on a drop-down bar.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditArray.#ctor(Microsoft.VisualStudio.Package.Source,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Boolean,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.EditArray" /> class using a <see cref="T:Microsoft.VisualStudio.Package.Source" /> object and an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object.</summary>
      <param name="source">[in] A <see cref="T:Microsoft.VisualStudio.Package.Source" /> object representing the source to be changed.</param>
      <param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that displays the source.</param>
      <param name="merge">[in] true if the edits are to be merged where possible, otherwise false.</param>
      <param name="description">[in] The description of the edit operations.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditArray.Add(Microsoft.VisualStudio.Package.EditSpan)">
      <summary>Adds the specified <see cref="T:Microsoft.VisualStudio.Package.EditSpan" /> object to the array of edit operations.</summary>
      <param name="editSpan">[in] An <see cref="T:Microsoft.VisualStudio.Package.EditSpan" /> object describing an edit operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditArray.ApplyEdits">
      <summary>Applies all edit operations that have been accumulated.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.EditArray.Count">
      <summary>Gets the number of edit operations represented in the <see cref="T:Microsoft.VisualStudio.Package.EditArray" /> object.</summary>
      <returns>The number of edit operations that can be applied.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditArray.Dispose">
      <summary>Disposes the <see cref="T:Microsoft.VisualStudio.Package.EditArray" /> object and its resources.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditArray.Finalize">
      <summary>Tears down the <see cref="T:Microsoft.VisualStudio.Package.EditArray" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditArray.GetEnumerator">
      <summary>Gets a default enumerator for the edit operations.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.EditArray.Source">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Package.Source" /> object associated with this <see cref="T:Microsoft.VisualStudio.Package.EditArray" /> object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Package.Source" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.EditArray.TextView">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object associated with this <see cref="T:Microsoft.VisualStudio.Package.EditArray" /> object.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditArray.ToString">
      <summary>Converts the array of edit operations to a formatted string.</summary>
      <returns>The formatted string to which the edit operations have been converted.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorControl.#ctor(System.IServiceProvider,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Windows.Forms.Control)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.EditorControl" /> with the supplied buffer and control and the main service provider.</summary>
      <param name="site">The main <see cref="T:System.IServiceProvider" />.</param>
      <param name="buffer">The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> buffer.</param>
      <param name="ctrl">The associated <see cref="T:System.Windows.Forms.Control" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorControl.ClosePane">
      <summary>Closes the window and disposes the resources.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorControl.CommitPendingEdit(System.Int32@)">
      <summary>Commits any changes made to the file.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeded, otherwise an error code.</returns>
      <param name="fCommitFailed">[out] Returns true if the changes could not be committed. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.EditorControl.Control">
      <summary>Gets or sets the control that represents the editor window.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Control" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorControl.CreatePaneWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr@)">
      <summary>Creates the window.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />. </returns>
      <param name="hwndParent">The parent window.</param>
      <param name="x">Absolute x ordinate.</param>
      <param name="y">Absolute y ordinate. </param>
      <param name="cx">x ordinate relative to x.</param>
      <param name="cy">y ordinate relative to y.</param>
      <param name="hwnd">[out] Returns a pointer to the new window pane. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorControl.FDoIdle(System.UInt32)">
      <summary>Gives the component a chance to do idle time tasks.  </summary>
      <returns>true if more time is needed to perform the idle time tasks, false otherwise.</returns>
      <param name="grfidlef">Flags from the <see cref="T:Microsoft.VisualStudio.OLE.Interop._OLEIDLEF" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorControl.FQueryTerminate(System.Int32)">
      <summary>Called when the component manager wishes to know whether the component is in a state in which it can terminate. </summary>
      <returns>true if the component can terminate, otherwise false.</returns>
      <param name="fPromptUser">true if the component should prompt the user if it needs to terminate, false if it should not prompt the user.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorControl.HwndGetWindow(System.UInt32,System.UInt32)">
      <summary>Gets a window associated with the component.</summary>
      <returns>The <see cref="P:System.Windows.Forms.Control.Handle" /> of the control.</returns>
      <param name="dwWhich">A value from <see cref="T:Microsoft.VisualStudio.OLE.Interop._OLECWINDOW" />.</param>
      <param name="dwReserved">Reserved for future use; should be 0.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorControl.OnAppActivate(System.Int32,System.UInt32)">
      <summary>Notifies the component whenever the host application is activated or deactivated.</summary>
      <param name="fActive">If true, the host application is being activated, otherwise it is being deactivated.</param>
      <param name="dwOtherThreadID">If the host application is being activated, the ID of the thread that owns the window being deactivated. If the host application is being deactivated, the ID of the thread owning the window being activated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorControl.OnLoseActivation">
      <summary>Notifies the active component that it has lost its active status because the host or another component has become active.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.#ctor">
      <summary>Initializes a new instance of <see cref="EditorFactory" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.#ctor(Microsoft.VisualStudio.Shell.Package)">
      <summary>Creates an instance of the <see cref="T:Microsoft.VisualStudio.Package.EditorFactory" /> class.</summary>
      <param name="package">The package object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.Close">
      <summary>Releases all service provides and sets the package object to null.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.EditorFactory.CodePagePrompt">
      <summary>Gets and sets flags to prompt user for an encoding on an open with specified codepage.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__PROMPTONLOADFLAGS" /> enumeration value.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)">
      <summary>Used by the EditorFactory class to create the Visual Studio core editor, an editor that supports data/view separation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="createDocFlags">Flags that define the conditions under which to create the core editor.</param>
      <param name="moniker">String form of the moniker identifier of the document in the project system. In the case of documents that are files, this is always the path to the file. This parameter can also be used to specify documents that are not files. For example, in a database-oriented project, this parameter could contain a string that refers to records in a table.</param>
      <param name="physicalView">Name of the physical view.</param>
      <param name="pHier">An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object.</param>
      <param name="itemid">Item identifier of the core editor instance.</param>
      <param name="existingDocData">Must be the <paramref name="docData" /> object that is registered in the Running Document Table (RDT). This parameter is used to determine if a document buffer (Document Data object) has already been created. When an editor factory is asked to create a secondary view, then this parameter will be non-NULL indicating that there is no document buffer.</param>
      <param name="docView">Document View object. Returns NULL if an external editor exists, otherwise returns the view of the document.</param>
      <param name="docData">Document Data object. Returns the buffer for the document.</param>
      <param name="editorCaption">Initial caption defined by the document editor for the document window. This is typically a string enclosed in square brackets, such as "[Form]". This value is passed as an input parameter to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateDocumentWindow(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> method. If the file is [ReadOnly] the caption will be set during load of the file.</param>
      <param name="cmdUI">Returns the Command UI GUID. This GUID is active when this editor is activated. Any UI element that is visible in the editor has to use this GUID. This GUID is used in the .ctc file in the satellite DLL where it indicates which menus and toolbars should be displayed when the document is active.</param>
      <param name="cancelled">Enumeration of type <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSEDITORCREATEDOCWIN" />. These flags are passed to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateDocumentWindow(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> Method. This value is set to 0 in EditorFactory implementation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorView(System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.String,System.String@,System.Guid@)">
      <summary>Creates a code window with the Visual Studio core editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="moniker">String form of the moniker identifier of the document in the project system. In the case of documents that are files, this is always the path to the file.</param>
      <param name="buffer">The buffer used to set the text buffer for all views in the code window.</param>
      <param name="physicalView">Name of the physical view.</param>
      <param name="editorCaption">Initial caption defined by the document editor for the document window. This is typically a string enclosed in square brackets, such as "[Form]". This value is passed as an input parameter to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateDocumentWindow(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> method. If the file is [ReadOnly] the caption will be set during load of the file.</param>
      <param name="cmdUI">
        <see cref="F:Microsoft.VisualStudio.VSConstants.GUID_TextEditorFactory" />
      </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.Finalize">
      <summary>Destructor for the EditorFactory class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetExtensions">
      <summary>Returns a list of file extensions registered for this editor factory.</summary>
      <returns>An array of strings containing the editor extensions.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetLanguageService(System.String)">
      <summary>Gets the GUID of the language service registered for this file extension under the registry key HKLM\Software\Microsoft\Visual Studio\8.0\Language Services\Extensions.</summary>
      <returns>The GUID of the language service.</returns>
      <param name="fileExtension">The file extension for the desired language service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetLanguageServiceGuid">
      <summary>gETs the language service GUID.</summary>
      <returns>This method returns the language service GUID. The base method returns an empty GUID.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetPackage">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Shell.Package" /> object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Package" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetRegisteredEditor(System.String)">
      <summary>Gets the GUID of the highest-priority editor registered for this extension. This will also pick up user-defined associations between file extensions and editors </summary>
      <returns>The GUID of the editor.</returns>
      <param name="extension">The extension for which to get the editor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetRegisteredEditorInfo(System.String)">
      <summary>Gets the <see cref="EditorFactory.EditorInfo" /> for the specified extension.</summary>
      <returns>The <see cref="EditorFactory.EditorInfo" /> registered for the given extension.</returns>
      <param name="extension">The extension for which to get the editor information</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetSite">
      <summary>Gets the main service provider.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetUserDefinedEditor(System.String)">
      <summary>Gets the GUID of the editor that the user has defined for this file extension. </summary>
      <returns>The GUID of the editor, or an empty GUID if none is found</returns>
      <param name="extension">The extension for which to get the editor.</param>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.EditorFactory.GuidVSBufferDetectLangSid">
      <summary>Gets a GUID value in <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData" /> that, when set to false, will stop the core editor for searching for a different language service.</summary>
      <returns>The GUID corresponding to the value that, when set to false, will stop the core editor for searching for a different language service.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.IsOurFileFormat(System.String)">
      <summary>Checks whether there is an editor that can handle this extension.</summary>
      <returns>By default returns true. Implementations should override this method to handle their own file formats.</returns>
      <param name="moniker">The extension for which an editor is desired.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.IsRegisteredExtension(System.String)">
      <summary>Determines if a file extension is registered with this editor factory.</summary>
      <returns>Returns true if the file extension is registered with this editor factory, false otherwise.</returns>
      <param name="extension">A string containing the file extension.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.MapLogicalView(System.Guid@,System.String@)">
      <summary>Maps a logical view to a physical view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="logicalView">Unique identifier of the logical view.</param>
      <param name="physicalView">The name of the physical view to which the logical view is to be mapped.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.EditorFactory.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Sets the service provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="psp">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> object of the editor being initialized.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.EditorFactory.EditorInfo">
      <summary>Contains data about a specific editor.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.EditSpan">
      <summary>Describes an edit operation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.#ctor(Microsoft.VisualStudio.Package.ExpansionProvider)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.ExpansionFunction" /> class.</summary>
      <param name="provider">[in] The <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> object </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ExpansionFunction.Arguments">
      <summary>Gets or sets the arguments to the function.</summary>
      <returns>An array of arguments of the expansion function.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ExpansionFunction.ExpansionProvider">
      <summary>Gets the expansion provider that owns this expansion function.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.FieldChanged(System.String,System.Int32@)">
      <summary>Called when a field has changed its value.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="bstrField">[in] The name of the field that was changed.</param>
      <param name="fRequeryValue">[out] Returns nonzero if the expansion function depends on the value of the specified field and needs to be re-queried; otherwise, returns zero.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ExpansionFunction.FieldName">
      <summary>Gets or sets the name of the field with which this expansion function is associated.</summary>
      <returns>The name of the field with which this expansion function is associated.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetArgument(System.Int32)">
      <summary>Gets the specified argument.</summary>
      <returns>The specified argument if it exists, otherwise null.</returns>
      <param name="index">[in] The position in the arguments array to get.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetCurrentValue">
      <summary>Gets the current value of the expansion function as a string.</summary>
      <returns>The current value of the expansion function, otherwise null.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetCurrentValue(System.String@,System.Int32@)">
      <summary>Gets the current value of the expansion function.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.</returns>
      <param name="bstrValue">[out] Returns the value, if it exists, otherwise an empty string.</param>
      <param name="hasDefaultValue">[out] Returns true if <paramref name="bstrValue" /> is not null. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetDefaultValue">
      <summary>Gets the default value of the expansion function.</summary>
      <returns>The default value, if it exists, otherwise null.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetDefaultValue(System.String@,System.Int32@)">
      <summary>Gets the default value of the expansion function.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.</returns>
      <param name="bstrValue">[out] Returns the default value if it exists, otherwise returns an empty string.</param>
      <param name="hasCurrentValue">[out] Returns true if <paramref name="bstrValue" /> is not null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetFieldValue(System.String,System.String@)">
      <summary>Gets the value of the specified field.</summary>
      <returns>If the value was obtained, returns true; otherwise, returns false.</returns>
      <param name="name">[in] The name of the field for which to get a value.</param>
      <param name="value">[out] Returns the requested value or null if the value could not be obtained.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetFunctionType(System.UInt32@)">
      <summary>Gets the type of the function; that is, what type of value the function returns.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pFuncType">[out] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop._ExpansionFunctionType" /> enumeration specifying the type of the expansion function.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetIntellisenseList">
      <summary>Gets a list of all values the expansion function can return.</summary>
      <returns>If the type of the expansion function is a list, returns a list of values; otherwise, returns null.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetListCount(System.Int32@)">
      <summary>Gets the number of items in the list of values for the expansion function.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iListCount">[out] Returns the number of items in the list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetListText(System.Int32,System.String@)">
      <summary>Gets the value of the specified list item.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="iIndex">[in] The index of the item for which to get the value.</param>
      <param name="ppszText">[out] Returns the value of the requested list item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetSelection">
      <summary>Gets the span of the selected text in the current view.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object containing the span of the selected text.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.ReleaseFunction">
      <summary>Frees any allocations your <see cref="T:Microsoft.VisualStudio.Package.ExpansionFunction" /> class may have made.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.#ctor(Microsoft.VisualStudio.Package.Source)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> class.</summary>
      <param name="src">[in] A <see cref="T:Microsoft.VisualStudio.Package.Source" /> object describing the source that this expansion provider supports.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.BeginTemplateEditing(System.Int32,System.Int32)">
      <summary>Inserts the previously prepared code snippet and starts the snippet editing mode.</summary>
      <param name="line">[in] The line number where the insertion is to take place.</param>
      <param name="col">[in] The character offset on the line where the insertion is to take place.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.DisplayExpansionBrowser(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.String[],System.Boolean,System.String[],System.Boolean)">
      <summary>Displays a list of expansion templates of the specified type and kind.</summary>
      <returns>If successful, returns true; otherwise, returns false, the browser box was not displayed.</returns>
      <param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object that represents the view the source file is in and the view that is the parent of the browser box.</param>
      <param name="prompt">[in] A string containing the prompt in the browser box.</param>
      <param name="types">[in] An array of strings containing the types of expansions to show. If this array is empty or a null value, then all types are shown in the browser box.</param>
      <param name="includeNullType">[in] This is true to allow "empty" types through the filter even if the <paramref name="types" /> array is specified.</param>
      <param name="kinds">[in] An array of strings containing the kinds of expansions to show. If this array is empty or a null value, then all kinds are shown in the browser box.</param>
      <param name="includeNullKind">[in] This is true to allow "empty" kinds through the filter even if the <paramref name="kinds" /> array is specified.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.Dispose">
      <summary>Cleans up allocated resource just before the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> object is destroyed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.EndExpansion">
      <summary>Called when an expansion session has ended.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.EndTemplateEditing(System.Boolean)">
      <summary>Ends the current snippet editing mode.</summary>
      <param name="leaveCaret">[in] This is true if the caret is to be left where it was before the snippet was inserted; otherwise, this is false if the caret is positioned where the snippet indicates.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.Expansion">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansion" /> object used for inserting snippets into a buffer.</summary>
      <returns>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansion" /> object that was obtained from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object in the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> class constructor (<see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.#ctor(Microsoft.VisualStudio.Package.Source)" />).</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.ExpansionSession">
      <summary>Returns the expansion session created to manage editing the code snippet.</summary>
      <returns>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession" /> object that was passed to the <see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.OnBeforeInsertion(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession)" /> method.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.Finalize">
      <summary>Cleans up all resources just before the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> object is destroyed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.FindExpansionByShortcut(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Boolean,System.String@,System.String@)">
      <summary>Obtains the path and title of a code snippet given the snippet's shortcut name.</summary>
      <returns>If an expansion template was found, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns  an error code from the <see cref="T:Microsoft.VisualStudio.VSConstants" /> enumeration.</returns>
      <param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view in which the snippet is to be inserted.</param>
      <param name="shortcut">[in] A string containing the shortcut name of the snippet.</param>
      <param name="span">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the position or selection in the current source.</param>
      <param name="showDisambiguationUI">[in] This is true if a user interface can be shown to resolve duplicate names; otherwise, false means to select the first expansion found that matches the shortcut name. </param>
      <param name="title">[out] Returns the title of the snippet found.</param>
      <param name="path">[out] Returns the path to the snippet template file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.FormatSpan(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Formats the specified text span.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" /> if the method succeeded, otherwise <see cref="F:Microsoft.VisualStudio.NativeMethods.E_NOTIMPL" />.</returns>
      <param name="buffer">The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> buffer.</param>
      <param name="ts">An array of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> objects.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetExpansionFunction(MSXML.IXMLDOMNode,System.String,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction@)">
      <summary>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction" /> object representing the expansion function described in the given XML template node (COM implementation).</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="xmlFunctionNode">[in] A IXMLDOMNode object representing the expansion function description.</param>
      <param name="fieldName">[in] The name of the variable or field this expansion function represents.</param>
      <param name="func">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction" /> object representing the implementation of the expansion function.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetExpansionFunction(System.Xml.XmlElement,System.String)">
      <summary>Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction" /> object representing the expansion function described in the given XML template node. </summary>
      <returns>If successful, returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction" /> object; otherwise, returns a null value indicating no expansion function was found in the specified XML node.</returns>
      <param name="xmlFunctionNode">[in] An <see cref="T:System.Xml.XmlElement" /> object representing the expansion function definition.</param>
      <param name="fieldName">[in] The name of the variable or field this expansion function represents.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetExpansionSpan">
      <summary>Returns the span occupied by the snippet currently being edited.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object representing the snippet's span in the source file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetFieldSpan(System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
      <summary>Gets the field span of the specified field </summary>
      <returns>true if <see cref="P:Microsoft.VisualStudio.Package.ExpansionProvider.ExpansionSession" /> is not null, otherwise false.</returns>
      <param name="field">The field for which to get the text span.</param>
      <param name="pts">[out] Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />, which may be empty if there is no <see cref="P:Microsoft.VisualStudio.Package.ExpansionProvider.ExpansionSession" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetFieldValue(System.String,System.String@)">
      <summary>Returns the value of the specified field.</summary>
      <returns>If there is an expansion session in progress and the specified field exists and contains a value, returns true; otherwise, returns false.</returns>
      <param name="field">[in] A string containing the name of the field for which to get a value.</param>
      <param name="value">[out] A string containing the value of the field.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.HandlePostExec(System.Guid@,System.UInt32,System.UInt32,System.Boolean,System.IntPtr,System.IntPtr)">
      <summary>Called after a command has been executed.</summary>
      <returns>If the command was handled, returns true; otherwise, returns false to let the caller handle the command.</returns>
      <param name="guidCmdGroup">[in] The GUID of the command group.</param>
      <param name="nCmdId">[in] The specific ID of the command from the command group. This identifies the command to execute.</param>
      <param name="nCmdexecopt">[in] Additional parameters for the command (packed into a 32-bit value).</param>
      <param name="commit">[in] This is true if the code snippet has been committed to the source file.</param>
      <param name="pvaIn">[in] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> holding any parameters required by the command. This can be a null value indicating there are no additional parameters.</param>
      <param name="pvaOut">[in, out] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> to hold the result of the command, if any.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.HandlePreExec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Called before a command is executed.</summary>
      <returns>If the command was handled, returns true; otherwise, returns false to let the caller handle the command.</returns>
      <param name="guidCmdGroup">[in] The GUID of the command group.</param>
      <param name="nCmdId">[in] The specific ID of the command from the command group. This identifies the command to execute.</param>
      <param name="nCmdexecopt">[in] Additional parameters for the command (packed into a 32-bit value).</param>
      <param name="pvaIn">[in] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> holding any parameters required by the command. This can be a null value indicating there are no additional parameters.</param>
      <param name="pvaOut">[in, out] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> to hold the result of the command, if any.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.HandleQueryStatus(System.Guid@,System.UInt32,System.Int32@)">
      <summary>Determines if the specified command is handled by the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> class.</summary>
      <returns>If the command is supported by the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> class, returns true; otherwise, returns false.</returns>
      <param name="guidCmdGroup">[in] The GUID of the command group.</param>
      <param name="nCmdId">[in] The specific ID of the command from the command group. This identifies the command to execute.</param>
      <param name="hr">[out] Returns a combination of values from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMD" /> enumeration indicating support for the specified command.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.InsertNamedExpansion(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Boolean)">
      <summary>Inserts the specified snippet into the source at the given position.</summary>
      <returns>If a snippet was inserted, returns true; otherwise, returns false.</returns>
      <param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view showing the source.</param>
      <param name="title">[in] A string containing the name or title of the snippet.</param>
      <param name="path">[in] A string containing the path to the snippet template file.</param>
      <param name="pos">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object specifying the position where the snippet is to be inserted.</param>
      <param name="showDisambiguationUI">[in] This is true if there is more than one snippet with the given title and a dialog box must be shown so the user can select which snippet to insert; otherwise, this is false (accept the first snippet with the given title).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.InsertSpecificExpansion(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Xml.XmlElement,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
      <summary>Inserts the specific snippet into the source at the specified position.</summary>
      <returns>If the snippet was inserted, returns true; otherwise, returns false.</returns>
      <param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view showing the source.</param>
      <param name="snippet">[in] An <see cref="T:System.Xml.XmlElement" /> object containing the snippet to insert.</param>
      <param name="pos">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object specifying the position where the snippet is to be inserted.</param>
      <param name="relativePath">[in] A relative path to the snippet template file from which this snippet was taken.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.InTemplateEditingMode">
      <summary>Indicates whether the code snippet is currently being edited.</summary>
      <returns>Returns true if the code snippet is currently being edited; otherwise, returns false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.IsValidKind(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String,System.Int32@)">
      <summary>Determines whether this is valid text for expansion. This method should be overridden if you want to specify where in the source document the expansion can take place.</summary>
      <returns>When overridden in derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.</returns>
      <param name="buffer">The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> buffer.</param>
      <param name="ts">An array of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> objects.</param>
      <param name="bstrKind">The kind of expansion to perform.</param>
      <param name="fIsValid">[out] Returns true if it is a valid expansion kind, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.IsValidType(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String[],System.Int32,System.Int32@)">
      <summary>Determines whether or not a given type is valid for expansion purposes. This method should be overridden if you want to specify where in the source document the expansion can take place.</summary>
      <returns>When overridden in derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.</returns>
      <param name="buffer">The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> buffer.</param>
      <param name="ts">An array of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> objects.</param>
      <param name="rgTypes">An array of expansion types.</param>
      <param name="iCountTypes">The number of expansion types in the <paramref name="rgTypes" /> array.</param>
      <param name="fIsValid">[out] Returns true if the type is valid, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.OnAfterInsertion(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession)">
      <summary>Called after a snippet has been inserted into the source.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="session">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession" /> object representing the expansion session that is currently active.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.OnBeforeInsertion(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession)">
      <summary>Called just before the snippet has been inserted into the source.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="session">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession" /> object representing the expansion session that is currently active.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.OnItemChosen(System.String,System.String)">
      <summary>Called when an item is chosen in a snippet browser.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pszTitle">[in] A string containing the name of the snippet that was selected.</param>
      <param name="pszPath">[in] A string containing the path to the snippet template file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.PositionCaretForEditing(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Puts the caret in a position suitable for editing. </summary>
      <returns>When overridden in derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the method succeeds, otherwise an error code.</returns>
      <param name="pBuffer">The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> buffer.</param>
      <param name="ts">An array of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> objects.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.PrepareTemplate(System.String,System.String)">
      <summary>Prepares for insertion of the specified snippet.</summary>
      <param name="title">[in] A string containing the name of the snippet to insert.</param>
      <param name="path">[in] A string containing the path to the snippet template file.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.Source">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.Package.Source" /> object associated with this expansion provider.</summary>
      <returns>Returns the <see cref="T:Microsoft.VisualStudio.Package.Source" /> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> class constructor (<see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.#ctor(Microsoft.VisualStudio.Package.Source)" />).</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.TextView">
      <summary>Returns the text view containing the source file being manipulated by the expansion provider.</summary>
      <returns>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object that was passed to the <see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.DisplayExpansionBrowser(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.String[],System.Boolean,System.String[],System.Boolean)" />, <see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.InsertSpecificExpansion(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Xml.XmlElement,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)" />, <see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.InsertNamedExpansion(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Boolean)" />, and <see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.FindExpansionByShortcut(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Boolean,System.String@,System.String@)" /> methods.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FilePathUtilities.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Package.FilePathUtilities" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FilePathUtilities.GetFileExtension(System.String)">
      <summary>Gets the file extension from a given file path.</summary>
      <returns>The extension (lower case, preceded by ".").</returns>
      <param name="moniker">The file path.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FilePathUtilities.GetFilePath(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Gets the file path from an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> buffer.</summary>
      <returns>The file path.</returns>
      <param name="textLines">The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.FilePathUtilities.GetFilePath(System.IntPtr)">
      <summary>Get file path for an object that implements <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData" />.</summary>
      <returns>The file path.</returns>
      <param name="unknown">A pointer to the IUnknown interface of the file path.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.IScanner">
      <summary>Used as the interface for a language parser in a language service.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.LanguagePreferences">
      <summary>Provides support for language service-specific preferences.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.LanguageService">
      <summary>This is the base class for a language service that supplies language features including syntax highlighting, brace matching, auto-completion, IntelliSense support, and code snippet expansion.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.CanStopThread(Microsoft.VisualStudio.Package.Source)"></member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.DispatchCommand(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)"></member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetOrCreateSource(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)"></member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.GetPrimaryViewForSource(Microsoft.VisualStudio.Package.Source)"></member>
    <member name="M:Microsoft.VisualStudio.Package.LanguageService.OnParseAborted"></member>
    <member name="P:Microsoft.VisualStudio.Package.LanguageService.ParseThreadIsAlive"></member>
    <member name="P:Microsoft.VisualStudio.Package.LanguageService.ParseThreadPaused"></member>
    <member name="M:Microsoft.VisualStudio.Package.MethodData.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.MethodData" /> class.</summary>
      <param name="site">[in] An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> object that is to be used as the service provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.MethodData.AdjustCurrentParameter(System.Int32)">
      <summary>Update the current parameter, either forward or backward, by the specified amount.</summary>
      <param name="increment">[in] A value to add to the current parameter index. This is negative if the parameter index is to be decremented.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.MethodData.Close">
      <summary>Closes the method tip and clears the <see cref="T:Microsoft.VisualStudio.Package.MethodData" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.MethodData.Dismiss">
      <summary>Dismisses the method tip from view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.MethodData.Dispose">
      <summary>Frees any allocations made just before the <see cref="T:Microsoft.VisualStudio.Package.MethodData" /> object is destroyed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.MethodData.GetContextStream(System.Int32@,System.Int32@)">
      <summary>Converts the current context span to a file position and length.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pos">[out] Returns the position in the source file that corresponds to the start of the context span.</param>
      <param name="length">[out] Returns the length of the span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.MethodData.GetCurMethod">
      <summary>Returns the currently visible method signature.</summary>
      <returns>Returns a number representing the currently visible method signature in the <see cref="T:Microsoft.VisualStudio.Package.Methods" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.MethodData.GetCurrentParameter(System.Int32)">
      <summary>Returns the current parameter being edited in the specified method signature.</summary>
      <returns>Returns the current index into the parameter list for the specified method signature.</returns>
      <param name="method">[in] An index in the <see cref="T:Microsoft.VisualStudio.Package.Methods" /> object to the specified method signature.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.MethodData.GetMethodText(System.Int32,Microsoft.VisualStudio.TextManager.Interop.MethodTextType)">
      <summary>Returns the specified text for the specified method signature.</summary>
      <returns>If successful, returns a marshaled pointer to the requested string; otherwise, returns a null value.</returns>
      <param name="method">[in] An index in the <see cref="T:Microsoft.VisualStudio.Package.Methods" /> object to the specified method signature.</param>
      <param name="type">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MethodTextType" /> enumeration specifying what type of text to return.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.MethodData.GetOverloadCount">
      <summary>Returns the number of method signatures that can be shown.</summary>
      <returns>If there is at least one method signature, returns the number of method signatures available; otherwise, returns 0.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.MethodData.GetParameterCount(System.Int32)">
      <summary>Returns the number of parameters available for the specified method signature.</summary>
      <returns>If successful, returns the number of parameters; otherwise, returns 0.</returns>
      <param name="method">[in] An index in the <see cref="T:Microsoft.VisualStudio.Package.Methods" /> object to the specified method signature.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.MethodData.GetParameterText(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.ParameterTextType)">
      <summary>Returns the specified parameter text for the specified method signature.</summary>
      <returns>If successful, returns a marshaled pointer to the requested string; otherwise, returns a null value.</returns>
      <param name="method">[in] An index in the <see cref="T:Microsoft.VisualStudio.Package.Methods" /> object to the specified method signature.</param>
      <param name="parameter">[in] An index to the specified parameter.</param>
      <param name="type">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ParameterTextType" /> enumeration specifying what type of text to return.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.MethodData.IsDisplayed">
      <summary>Determines if the method tip is visible.</summary>
      <returns>If the method tip is displayed, returns true; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.MethodData.Methods">
      <summary>Determines the list of method signatures that can be displayed in the method tip.</summary>
      <returns>Returns the <see cref="T:Microsoft.VisualStudio.Package.Methods" /> object that was passed to the <see cref="M:Microsoft.VisualStudio.Package.MethodData.Refresh(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.Methods,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan)" /> method.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.MethodData.MethodTipWindow">
      <summary>Determines the method tip window as represented by an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow" /> interface.</summary>
      <returns>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow" /> object that was created in the <see cref="T:Microsoft.VisualStudio.Package.MethodData" /> class constructor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.MethodData.NextMethod">
      <summary>Moves to the next method signature and returns the index of the current method signature.</summary>
      <returns>Returns a number representing the current method signature.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.MethodData.OnDismiss">
      <summary>Called after the method tip is removed from view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.MethodData.PrevMethod">
      <summary>Moves to the previous method signature and returns the index of the current method signature.</summary>
      <returns>Returns a number representing the current method signature.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.MethodData.Provider">
      <summary>Determines the service provider.</summary>
      <returns>Returns the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.MethodData" /> class constructor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.MethodData.Refresh(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.Methods,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Displays the method tip with the given method signatures.</summary>
      <param name="textView">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that displays the method tip.</param>
      <param name="methods">[in] A <see cref="T:Microsoft.VisualStudio.Package.Methods" /> object representing the method signatures to be displayed.</param>
      <param name="currentParameter">[in] The parameter to be highlighted initially. Set this to -1 to start before the first parameter. This value is typically determined by parsing what the user has typed so far since the start of the parameter list.</param>
      <param name="context">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object specifying the initial span containing the method name that has already been typed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.MethodData.TextView">
      <summary>Determines the view the method tip is displayed on.</summary>
      <returns>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object that was passed to the <see cref="M:Microsoft.VisualStudio.Package.MethodData.Refresh(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.Methods,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan)" /> method.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.MethodData.UpdateView">
      <summary>Updates the method tip display.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Methods.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.Methods" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Methods.CloseBracket">
      <summary>Gets the character to use at the end of a method parameter list.</summary>
      <returns>The character to use at the end of a parameter list.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Methods.DefaultMethod">
      <summary>Gets the index of the initial method signature to show.</summary>
      <returns>The index of the first method signature to show the user when the IntelliSense method tip is displayed.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Methods.Delimiter">
      <summary>Gets the character that separates parameters in a method's parameter list.</summary>
      <returns>The parameter list separator.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Methods.GetCount">
      <summary>When implemented in a derived class, gets the number of overloaded method signatures represented in this collection.</summary>
      <returns>The number of signatures in the collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Methods.GetDescription(System.Int32)">
      <summary>When implemented in a derived class, gets the description of the specified method signature.</summary>
      <returns>The description of the specified method signature, or null if the method signature does not exist.</returns>
      <param name="index">[in] An index into the internal list to the desired method signature.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Methods.GetName(System.Int32)">
      <summary>When implemented in a derived class, gets the name of the specified method signature.</summary>
      <returns>The name of the specified method, or null.</returns>
      <param name="index">[in] The index of the method whose name is to be returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Methods.GetParameterCount(System.Int32)">
      <summary>When implemented in a derived class, gets the number of parameters on the specified method signature.</summary>
      <returns>The number of parameters on the specified method signature, or -1.</returns>
      <param name="index">[in] An index into the list of method signatures.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Methods.GetParameterInfo(System.Int32,System.Int32,System.String@,System.String@,System.String@)">
      <summary>When implemented in a derived class, gets information about the specified parameter on the specified method signature.</summary>
      <param name="index">[in] An index into the list of method signatures.</param>
      <param name="parameter">[in] An index into the parameter list of the specified method signature.</param>
      <param name="name">[out] Returns the name of the parameter.</param>
      <param name="display">[out] Returns the parameter name and type formatted for display.</param>
      <param name="description">[out] Returns a string containing a description of the parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Methods.GetType(System.Int32)">
      <summary>When implemented in a derived class, gets the return type of the specified method signature.</summary>
      <returns>The return type of the specified method signature, or null.</returns>
      <param name="index">[in] An index into the list of method signatures.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Methods.OpenBracket">
      <summary>Gets the character to use at the start of a method's parameter list.</summary>
      <returns>The character to use at the start of a parameter list.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Methods.TypePostfix">
      <summary>Gets the string to place after the return type of a method.</summary>
      <returns>The string to use after a method's type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Methods.TypePrefix">
      <summary>Gets the string to place before the return type of a method.</summary>
      <returns>The string to place before a method's return type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Methods.TypePrefixed">
      <summary>Gets whether a method's return type comes before or after the method signature.</summary>
      <returns>true if the type precedes the method's signature, false if the type follows the method's signature.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ParseRequest.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class in order to terminate the thread used for background parsing operations.</summary>
      <param name="terminate">[in] Set to true if the parsing operation is to be terminated. For this constructor, this argument is must always true.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.ParseRequest.#ctor(System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo,System.String,System.String,Microsoft.VisualStudio.Package.ParseReason,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.AuthoringSink,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class.</summary>
      <param name="line">The line on which to start the parsing operation.</param>
      <param name="col">The character offset on the first line to begin the parsing operation.</param>
      <param name="info">The object that is to be filled with the results of the parsing operation.</param>
      <param name="src">The text to be parsed.</param>
      <param name="fname">The name of the source file to be parsed.</param>
      <param name="reason">The reason the parsing operation was started.</param>
      <param name="view">The view that contains the source file that is being parsed.</param>
      <param name="sink">The object used to contain information from the parsing operation.</param>
      <param name="synchronous">true if the request is synchronous, false if it is asynchronous.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Callback">
      <summary>Specifies the callback delegate to be called when the parsing operation has completed.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Package.ParseResultHandler" /> delegate.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Col">
      <summary>Specifies the character offset on the first line to begin the parsing operation.</summary>
      <returns>Returns a number specifying the character offset that was passed as an argument to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class constructor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.DirtySpan">
      <summary>Specifies a span of source that has changed.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object specifying a span of source.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.FileName">
      <summary>Specifies the name of the source file being parsed.</summary>
      <returns>Returns the string containing the file name that was passed to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class constructor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.IsSynchronous">
      <summary>Gets or sets whether or not the request is synchronous.</summary>
      <returns>true if the request is synchronous; false if it is asynchronous.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Line">
      <summary>Specifies the line on which to start the parsing operation.</summary>
      <returns>Returns a number specifying the line number that was passed to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class constructor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Reason">
      <summary>Specifies the reason the parsing operation was started.</summary>
      <returns>Returns the <see cref="T:Microsoft.VisualStudio.Package.ParseReason" /> value passed to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class constructor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Scope">
      <summary>Specifies the <see cref="T:Microsoft.VisualStudio.Package.AuthoringScope" /> object that is used to return extended information from the parsing operation.</summary>
      <returns>Returns an <see cref="T:Microsoft.VisualStudio.Package.AuthoringScope" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Sink">
      <summary>Specifies an <see cref="T:Microsoft.VisualStudio.Package.AuthoringSink" /> object used to contain information from the parsing operation.</summary>
      <returns>Returns an <see cref="T:Microsoft.VisualStudio.Package.AuthoringSink" /> object that was created in the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class constructor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Terminate">
      <summary>Specifies whether the worker thread handling background parsing operations should exit.</summary>
      <returns>Returns true if the worker thread should exit.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Text">
      <summary>Specifies the source text to be parsed.</summary>
      <returns>Returns a string containing the source to be parsed as passed to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class constructor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.Timestamp">
      <summary>Specifies a time stamp for the parse request.</summary>
      <returns>Returns a number that represents a point in time.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.TokenInfo">
      <summary>Specifies a <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> structure that is filled in with the results of the parsing operation.</summary>
      <returns>Returns the <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class constructor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ParseRequest.View">
      <summary>Specifies the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that contains the source that is being parsed.</summary>
      <returns>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> class constructor.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ParseResultHandler">
      <summary>Used to define a delegate for a parsing operation completion handler in a language service.</summary>
      <param name="request">[in] A <see cref="T:Microsoft.VisualStudio.Package.ParseRequest" /> object that describes what the parsing operation did.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.SimpleEditorView">
      <summary>The abstract class that represents a generalized simple editor view.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.SimpleEditorView.MenuCommandService"></member>
    <member name="M:Microsoft.VisualStudio.Package.Source.#ctor(Microsoft.VisualStudio.Package.LanguageService,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.Package.Colorizer)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.Source" /> class.</summary>
      <param name="service">The <see cref="T:Microsoft.VisualStudio.Package.LanguageService" /> object representing the language service that controls this instance. This is required and cannot be null.</param>
      <param name="textLines">The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object representing the source file. This is required and cannot be null.</param>
      <param name="colorizer">The <see cref="T:Microsoft.VisualStudio.Package.Colorizer" /> object to use for syntax highlighting. This is required and cannot be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.BeginParse">
      <summary>Begins a full parsing operation either in the foreground or the background.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Source.ChangeCount">
      <summary>Gets the number of changes made to the source file since it was opened.</summary>
      <returns>The number of times the source file was changed.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.Close">
      <summary>Determines whether the source file can be closed.</summary>
      <returns>true if the source file can be closed; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Source.ColorState">
      <summary>Gets or sets the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextColorState" /> object that is used in various parsing tasks.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextColorState" /> interface that is obtained from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object passed to the constructor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.ColumnToVisiblePosition(System.Int32,System.Int32)">
      <summary>Gets the screen column position corresponding to the specified character offset, taking into account tab size.</summary>
      <returns>The screen column position that corresponds to the specified <paramref name="col" /> parameter.</returns>
      <param name="line">The line of source to look at.</param>
      <param name="col">The offset into the line of source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.CommentBlock(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String,System.String)">
      <summary>Comments out a span of source using block comments.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object encompassing the entire commented block, including the added comment start and end strings.</returns>
      <param name="span">A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the span of source to put into a block comment.</param>
      <param name="blockStart">A string that specifies the block comment start character or characters.</param>
      <param name="blockEnd">A string that specifies the block comment end character or characters.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.CommentLines(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
      <summary>Comments out a span of source using line comments.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object encompassing the entire commented block, including the added line comment start string.</returns>
      <param name="span">A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the span to put into line comments.</param>
      <param name="lineComment">The string that specifies the line comment character or characters.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.CommentSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Comments out the specified span of source.</summary>
      <returns>A new <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object encompassing the entire commented out span, including any comment start and end strings.</returns>
      <param name="span">A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the span of source to comment out.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Source.CompletedFirstParse">
      <summary>Gets whether the parser has completed at least once.</summary>
      <returns>true if the parser has completed at least once, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.Completion(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.TokenInfo,Microsoft.VisualStudio.Package.ParseReason)">
      <summary>Starts an IntelliSense member completion operation.</summary>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view the completion list is shown in.</param>
      <param name="info">The <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> object representing the token that triggered the completion operation.</param>
      <param name="reason">A value from the <see cref="T:Microsoft.VisualStudio.Package.ParseReason" /> enumeration specifying how this completion operation was triggered.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Source.CompletionSet">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Package.CompletionSet" /> collection used for this instance of the <see cref="T:Microsoft.VisualStudio.Package.Source" /> class.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Package.CompletionSet" /> object created in the constructor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.CreateAuthoringSink(Microsoft.VisualStudio.Package.ParseReason,System.Int32,System.Int32)">
      <summary>Creates an instance of an <see cref="T:Microsoft.VisualStudio.Package.AuthoringSink" /> object for use in parsing operations.</summary>
      <returns>Returns an <see cref="T:Microsoft.VisualStudio.Package.AuthoringSink" /> object.</returns>
      <param name="reason">A value from the ParseReason enumeration describing the reason for the parse operation.</param>
      <param name="line">The line index where the parsing is to start.</param>
      <param name="col">The column index where the parsing is to start.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.CreateCompletionSet">
      <summary>Creates a new instance of a <see cref="T:Microsoft.VisualStudio.Package.CompletionSet" /> class.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Package.CompletionSet" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.CreateErrorTaskItem(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,System.String)">
      <summary>Creates a new error task item for the Error List, for the supplied text, marker type, and file name.</summary>
      <returns>A new instance of <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" />.</returns>
      <param name="span">A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure, which defines a block of text.</param>
      <param name="markerType">A member of the <see cref="T:Microsoft.VisualStudio.TextManager.MARKERTYPE" /> enumeration.</param>
      <param name="filename">The name of the file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.CreateErrorTaskItem(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String,System.String,Microsoft.VisualStudio.Shell.TaskPriority,Microsoft.VisualStudio.Shell.TaskCategory,Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,Microsoft.VisualStudio.Shell.TaskErrorCategory)">
      <summary>Creates a new error task item for the Error List, for the supplied text, file name, message, priority, category, marker type, and error type.</summary>
      <returns>A new instance of <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" />.</returns>
      <param name="span">A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure, which defines a block of text.</param>
      <param name="filename">The name of the file.</param>
      <param name="message">The error message.</param>
      <param name="priority">A member of the <see cref="T:Microsoft.VisualStudio.Shell.TaskPriority" /> enumeration.</param>
      <param name="category">A member of the <see cref="T:Microsoft.VisualStudio.Shell.TaskCategory" /> enumeration.</param>
      <param name="markerType">A member of the <see cref="T:Microsoft.VisualStudio.TextManager.MARKERTYPE" /> enumeration.</param>
      <param name="errorCategory">A member of the <see cref="T:Microsoft.VisualStudio.Shell.ErrorCategory" /> enumeration, which defines the level of error.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.CreateMethodData">
      <summary>Creates a new instance of a <see cref="T:Microsoft.VisualStudio.Package.MethodData" /> object that handles the IntelliSense method tip mode.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Package.MethodData" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Source.DirtySpan">
      <summary>Gets a range that identifies the changed lines in the source.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object containing the range of lines that have been changed in the source file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.DismissCompletor">
      <summary>Removes the IntelliSense method tip or completion list from view, whichever was active.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.Dispose">
      <summary>Called in preparation of destroying this <see cref="T:Microsoft.VisualStudio.Package.Source" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.ExecMarkerCommand(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,System.Int32)">
      <summary>Executes the specified command on the specified region.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code. If support for commands on a hidden region is not needed, returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</returns>
      <param name="region">An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" /> object representing the hidden region to apply the command to.</param>
      <param name="cmd">A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" /> enumeration specifying the command to execute.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.Finalize">
      <summary>The class destructor, called just before the object is destroyed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetColorizer">
      <summary>Gets the colorizer associated with this <see cref="T:Microsoft.VisualStudio.Package.Source" /> object.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Package.Colorizer" /> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.Source" /> class constructor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetCommentFormat">
      <summary>Gets information on what defines a comment in the language.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Package.CommentInfo" /> structure containing the strings that define a comment.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetDocumentSpan">
      <summary>Gets the span occupied by the entire source file.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that encompasses the entire source file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetExpansionProvider">
      <summary>Gets an expansion provider in support of code snippets.</summary>
      <returns>If successful, returns an <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider" /> object; otherwise, returns null (code snippet expansion is not supported).</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetFilePath">
      <summary>Gets the file name of the source file.</summary>
      <returns>The file name of the source file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetHiddenTextSession">
      <summary>Gets the hidden region manager if available.</summary>
      <returns>If successful, returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession" /> object representing the hidden region manager; otherwise returns null.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetLine(System.Int32)">
      <summary>Gets the text on the specified line.</summary>
      <returns>The text at the specified line number. This could be an empty string.</returns>
      <param name="line">The line number for which to get the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetLineCount">
      <summary>Gets the number of lines in the source file.</summary>
      <returns>A number representing the number of lines in the source file. This value can be 0.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetLineIndexOfPosition(System.Int32,System.Int32@,System.Int32@)">
      <summary>Gets the line and column for the specified position.</summary>
      <param name="position">The position or character offset into the source file.</param>
      <param name="line">[out] Returns the line number corresponding to the position.</param>
      <param name="col">[out] Returns the column number (offset on the line) corresponding to the position.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetLineLength(System.Int32)">
      <summary>Gets the length of the specified line.</summary>
      <returns>A number representing the number of characters on the line.</returns>
      <param name="line">The line number for which to get the length.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetMarkerCommandInfo(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,System.Int32,System.String[],System.UInt32[])">
      <summary>Determines which marker commands can be shown on a context menu for the specified hidden region.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code. If support for commands on a hidden region is not needed, return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</returns>
      <param name="region">An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" /> object describing the hidden region.</param>
      <param name="item">A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" /> enumeration specifying the command to examine.</param>
      <param name="outText">[out] Returns the string to show on the context menu if the specified command is supported.</param>
      <param name="flags">[out] Returns a set of flags from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDF" /> enumeration indicating whether the command is supported.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetNewLine(System.Int32)">
      <summary>Gets the newline character used at the end of the specified line.</summary>
      <returns>The newline character from the end of the line.</returns>
      <param name="line"> The line number from which to get the new line character.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetPairExtents(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
      <summary>Returns the span that encompasses a matching pair of language elements between which is the given location.</summary>
      <param name="textView">An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object that represents the view containing the source to examine.</param>
      <param name="line">The line number in the source.</param>
      <param name="col">The offset on the line.</param>
      <param name="span">[out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object containing the span of the enclosing paired elements.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetPairExtents(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan@,Microsoft.VisualStudio.TextManager.Interop.TextSpan@)"></member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetPositionOfLineIndex(System.Int32,System.Int32)">
      <summary>Gets the position corresponding to the given line and character offset location.</summary>
      <returns>The position or character offset from the start of the source file.</returns>
      <param name="line">The line number of the location.</param>
      <param name="col">The offset on the line of the location.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetTaskProvider">
      <summary>Gets the task provider that manages the error tasks.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Shell.TaskProvider" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetText">
      <summary>Gets all of the text of the source file.</summary>
      <returns>The entire source file.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetText(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Gets the text included in the text span.</summary>
      <returns>The text included in the text span.</returns>
      <param name="span">A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure, which defines a block of text. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetText(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Gets the text between the specified locations.</summary>
      <returns>The desired text. This can be an empty string.</returns>
      <param name="startLine">The first line of text to obtain.</param>
      <param name="startCol">The offset on the first line to the first character to obtain.</param>
      <param name="endLine">The last line of text to obtain.</param>
      <param name="endCol">The offset on the last line to the last character to obtain.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetTextLines">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object associated with this <see cref="T:Microsoft.VisualStudio.Package.Source" /> object.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object passed to the <see cref="T:Microsoft.VisualStudio.Package.Source" /> class constructor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetTextUpToLine(System.Int32)">
      <summary>Gets the text from the source up to and including the given line number.</summary>
      <returns>All the text up to and including the given line.</returns>
      <param name="line">The line number of the last line of text to obtain. Specify 0 to obtain all the text in the source.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetTipText(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,System.String[])">
      <summary>Gets the text in the given hidden region to be used in a tool tip.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="region">The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" /> object from which to obtain the text to display.</param>
      <param name="result">[out] Returns the text from the hidden region.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetTokenInfo(System.Int32,System.Int32)">
      <summary>Gets information about the token at the specified position.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> object containing information about the current token.</returns>
      <param name="line">The number of the line containing the token to examine.</param>
      <param name="col">The character offset in the line to the token to examine.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetTokenInfoAt(Microsoft.VisualStudio.Package.TokenInfo[],System.Int32,Microsoft.VisualStudio.Package.TokenInfo@)">
      <summary>Gets the index of the <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> object that includes the supplied column number.</summary>
      <returns>The index of the <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> object which includes the specified column number, or -1 if it is not found.</returns>
      <param name="infoArray">The array of <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> objects to search.</param>
      <param name="col">The column number to find.</param>
      <param name="info">[ref] A <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetUserData(System.Guid@)">
      <summary>Gets the user data associated with the specified GUID.</summary>
      <returns>If successful, returns an object representing the requested data; otherwise, returns an error code.</returns>
      <param name="key">The GUID specifying what user data to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.GetWordExtent(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS,System.Int32@,System.Int32@)">
      <summary>Gets the span occupied by the word at the specified location.</summary>
      <returns>true if the word was found; otherwise, false, meaning that there is no word at that position.</returns>
      <param name="line">The line on which the word to examine is located.</param>
      <param name="idx">The offset into the line to somewhere in the word (does not have to be at the beginning of the word).</param>
      <param name="flags">A combination of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS" /> enumeration.</param>
      <param name="startIdx">[out] Returns the offset of the first character of the word.</param>
      <param name="endIdx">[out] Returns the offset of the character one past the last character of the word.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Source.IsClosed">
      <summary>Gets the current state of the source file.</summary>
      <returns>true if the source file is closed; otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Source.IsCompletorActive">
      <summary>Gets whether the IntelliSense member completion or method tip modes are active.</summary>
      <returns>rue if the completion or method tip modes are active; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Source.IsDirty">
      <summary>Gets or sets whether any of the lines of source have changed.</summary>
      <returns>true if at least one line of source has changed; otherwise, returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Source.LanguageService">
      <summary>Gets the language service associated with the source file.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Package.LanguageService" /> object passed to the constructor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Source.LastParseTime">
      <summary>Gets the duration of the last parse operation.</summary>
      <returns>The duration of the last parse.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.MakeBaseSpanVisible(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Ensures that the given span in the given hidden region is visible.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code. If this method is not implemented, return the <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" /> field.</returns>
      <param name="region">An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" /> object representing the hidden region to make visible.</param>
      <param name="span">A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the region to be made visible.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.MatchBraces(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo)">
      <summary>Highlights the spans of a pair of language elements, given the position of one of the elements.</summary>
      <param name="textView">An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view on the source file.</param>
      <param name="line">The line number of the language element for which to find a match.</param>
      <param name="index">The offset on the line of the location.</param>
      <param name="info">A <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> object containing the information about the token (that is, the language element for which to find a match) under the given location.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.MethodTip(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo)">
      <summary>Displays an IntelliSense method tip showing a method's signature as it is entered.</summary>
      <param name="textView">An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view containing the source file.</param>
      <param name="line">The line number where the user is entering text.</param>
      <param name="index">The offset into the line where the user is entering text.</param>
      <param name="info">A <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> object representing the token that triggered the method tip (typically, this is the parameter list start character, end character, or parameter separator character).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.NormalizeNewlines(System.String,System.String)">
      <summary>Converts the newlines in the specified text to the specified newline.</summary>
      <returns>Returns a string containing the converted text.</returns>
      <param name="input">The text in which to convert the newlines.</param>
      <param name="newline">The newline to which to convert.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.OnBeforeSessionEnd">
      <summary>Called just before a hidden region session is closed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.OnChangeLineAttributes(System.Int32,System.Int32)">
      <summary>Called when one or more lines' attributes (font, color) have changed.</summary>
      <param name="firstLine">The first line that was changed.</param>
      <param name="lastLine">The last line that was changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.OnChangeLineText(Microsoft.VisualStudio.TextManager.Interop.TextLineChange[],System.Int32)">
      <summary>Called when a line's text has changed.</summary>
      <param name="lineChange">The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextLineChange" /> object that describes the line that was changed.</param>
      <param name="last">Nonzero if the last line of the source is included in the change; otherwise, this is zero.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.OnChangesCommitted(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Called when a code snippet is committed to the source file.</summary>
      <param name="reason">A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags" /> enumeration describing why the change was committed.</param>
      <param name="changedArea">A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the total area that was changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.OnCommand(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.VSConstants.VSStd2KCmdID,System.Char)">
      <summary>Handles IntelliSense-oriented commands.</summary>
      <param name="textView">An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view containing the source where the command was entered.</param>
      <param name="command">A value from the <see cref="T:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID" /> enumeration specifying the command that was entered.</param>
      <param name="ch">The character that was typed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.OnHiddenRegionChange(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT,System.Int32)">
      <summary>Called when a hidden region has changed.</summary>
      <param name="region">An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" /> object representing the hidden region that has changed.</param>
      <param name="evt">A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT" /> enumeration describing how the region has changed.</param>
      <param name="fBufferModifiable">Nonzero if it is safe to change the source buffer as a result of the change; otherwise, the source buffer must remain untouched.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.OnIdle(System.Boolean)">
      <summary>Called when no other events are being handled.</summary>
      <param name="periodic">true if this call is a result of a periodic timer; otherwise, this is a truly idle call.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.OnUserDataChange(System.Guid@,System.Object)">
      <summary>Called when user data has been changed in a text buffer.</summary>
      <param name="riidKey">The GUID representing the value that was changed.</param>
      <param name="vtNewValue">A <see cref="T:Microsoft.VisualStudio.Package.Variant" /> containing the new value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.Open">
      <summary>Marks the <see cref="T:Microsoft.VisualStudio.Package.Source" /> object as being open.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Source.OutliningEnabled">
      <summary>Gets or sets whether outlining is currently enabled.</summary>
      <returns>true if outlining is enabled, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.ProcessHiddenRegions(System.Collections.ArrayList)">
      <summary>Updates all hidden regions based on the given list of hidden regions.</summary>
      <param name="hiddenRegions">An <see cref="T:System.Collections.ArrayList" /> of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" /> objects describing new hidden regions to add.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.Recolorize(System.Int32,System.Int32)">
      <summary>Updates the syntax highlighting on the specified range of lines.</summary>
      <param name="startLine">The first line to update.</param>
      <param name="endLine">The last line to update.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.ReformatSpan(Microsoft.VisualStudio.Package.EditArray,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Format the specified span of source.</summary>
      <param name="mgr">An <see cref="T:Microsoft.VisualStudio.Package.EditArray" /> object that contains the source to be reformatted.</param>
      <param name="span">A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the range of lines to be reformatted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.RemoveHiddenRegions">
      <summary>Removes all hidden regions from the current view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.RemoveTask(Microsoft.VisualStudio.Package.DocumentTask)">
      <summary>Removes the specified error task from the error Task window.</summary>
      <param name="task">A <see cref="T:Microsoft.VisualStudio.Package.DocumentTask" /> object representing the error task to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.ScanToNonWhitespaceChar(System.Int32)">
      <summary>Returns the offset of the first non-whitespace character on the given line.</summary>
      <returns>A character offset to the first non-whitespace character.</returns>
      <param name="line">The line number to examine.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.SetText(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
      <summary>Replaces the specified span of source with the given text.</summary>
      <param name="span"> A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the span to replace.</param>
      <param name="newText"> A string holding the new text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.SetText(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
      <summary>Replaces the specified section of source with the given text.</summary>
      <param name="startLine">The first line of source to replace.</param>
      <param name="startCol">The beginning offset of the first character on the first line to replace.</param>
      <param name="endLine">The last line of source to replace.</param>
      <param name="endCol">The last character offset on the last line to replace.</param>
      <param name="newText">The new text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.SetText(System.String)">
      <summary>Replaces the source contents with the given text.</summary>
      <param name="newText">The new text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.SetUserData(System.Guid@,System.Object)">
      <summary>Sets the given user data property to the given value.</summary>
      <param name="key">The GUID of the user data property to set the value for.</param>
      <param name="data">An object representing the value to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.TrimSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
      <summary>Adjusts the given span to skip leading and trailing whitespace.</summary>
      <param name="span">[in, out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object representing the span to modify. Returns the adjusted span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.UncommentBlock(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String,System.String)">
      <summary>Removes comment characters from around the specified span.</summary>
      <returns>A new <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the span after the comment characters have been removed.</returns>
      <param name="span">A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the span to uncomment.</param>
      <param name="blockStart">A string holding the characters that start a block comment.</param>
      <param name="blockEnd">A string holding the characters that end a block comment.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.UncommentLines(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
      <summary>Removes line comment characters from the beginning of each line in the given span.</summary>
      <returns>A new <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the span after the line comment characters have been removed.</returns>
      <param name="span">A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the range of lines to examine.</param>
      <param name="lineComment"> The characters that start a line comment.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.UncommentSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Removes any comment characters from the beginning and end of the given span.</summary>
      <returns>A new <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the span after the comment characters have been removed.</returns>
      <param name="span">A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the range of lines to examine.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.VisiblePositionToColumn(System.Int32,System.Int32)">
      <summary>Gets the character offset on the given line corresponding to the specified screen column position.</summary>
      <returns>The character offset into the line. If the visible position is off the end of the line, then return the length of the line.</returns>
      <param name="line">The number of the line to examine.</param>
      <param name="visiblePosition">The screen column to convert.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Source.BeginParse(System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo,Microsoft.VisualStudio.Package.ParseReason,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.ParseResultHandler)"></member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.Clear(Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
      <summary>Sets the members of the specified span to an empty state.</summary>
      <param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object to clear.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.ContainsExclusive(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,System.Int32)">
      <summary>Determines if the given position is contained within the given span, not including the start and end points.</summary>
      <returns>Returns true if the given position is greater than the start of the span and less than the end of the span. Returns false if the position is exactly equal to the start or end of the span or the position is outside the span.</returns>
      <param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is being tested against.</param>
      <param name="line">[in] The line index of the position to test.</param>
      <param name="col">[in] The column index of the position to test.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.ContainsInclusive(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,System.Int32)">
      <summary>Determines if the given position is inside the span, including the start and end points.</summary>
      <returns>Returns true if the given position is greater than or equal to the start of the span and less than or equal to the end of the span. Returns false if the given position is entirely outside the span.</returns>
      <param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is being tested against.</param>
      <param name="line">[in] The line index of the position to test.</param>
      <param name="col">[in] The column index of the position to test.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.EndsAfterEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Determines if the first span ends after the end of the second span.</summary>
      <returns>Returns true if the end of <paramref name="span1" /> is greater than the end of <paramref name="span2" />; otherwise, returns false.</returns>
      <param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
      <param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.EndsAfterStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Determines if the first span ends after the start of the second span.</summary>
      <returns>Returns true if the end of <paramref name="span1" /> is greater than the start of <paramref name="span2" />; otherwise, returns false.</returns>
      <param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
      <param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.EndsBeforeEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Determines if the first span ends before the end of the second span.</summary>
      <returns>Returns true if the end of <paramref name="span1" /> is less than or equal to the end of <paramref name="span2" />; otherwise, returns false.</returns>
      <param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
      <param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.EndsBeforeStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Determines if the first span ends before the start of the second span.</summary>
      <returns>Returns true if the end of <paramref name="span1" /> is less than or equal to the start of <paramref name="span2" />; otherwise, returns false.</returns>
      <param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
      <param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.Intersects(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Determines if the first span intersects the second span.</summary>
      <returns>Returns true if the start of <paramref name="span1" /> is less than the end of <paramref name="span2" /> and the end of <paramref name="span1" /> is greater than the start of <paramref name="span2" />; otherwise, returns false. Notice that the spans do not intersect if one span ends exactly where the other begins.</returns>
      <param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
      <param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsAfterEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,System.Int32)">
      <summary>Determines if the given position occurs after the end of the given span.</summary>
      <returns>Returns true if the given position is greater than the end of the given span; otherwise returns false.</returns>
      <param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is being tested against.</param>
      <param name="line">[in] The line index of the position to test.</param>
      <param name="col">[in] The column index of the position to test.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsBeforeStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,System.Int32)">
      <summary>Determines if the given position occurs before the start of the given span.</summary>
      <returns>Returns true if the given position is less than the start of the given span; otherwise, returns false.</returns>
      <param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is being tested against.</param>
      <param name="line">[in] The line index of the position to test.</param>
      <param name="col">[in] The column index of the position to test.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsEmbedded(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Determines if the first span is wholly contained within the second span.</summary>
      <returns>Returns true if the two spans are different and the start of <paramref name="span1" /> is equal to or greater than the start of <paramref name="span2" /> and the end of <paramref name="span1" /> is less than or equal to the end of <paramref name="span2" />; otherwise, returns false.</returns>
      <param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
      <param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsEmpty(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Determines if the given span is empty.</summary>
      <returns>Returns true if the given span is empty; otherwise, returns false.</returns>
      <param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is being tested.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsPositive(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Determines if the start of the given span occurs before the end of the span.</summary>
      <returns>Returns true if the start of the span is less than or equal to the end of the span; otherwise, returns false.</returns>
      <param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is being tested.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsSameSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Determines if two spans are the same.</summary>
      <returns>Returns true if the start of <paramref name="span1" /> equals the start of <paramref name="span2" /> and the end of <paramref name="span1" /> equals the end of <paramref name="span2" />; otherwise, returns false.</returns>
      <param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
      <param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.MakePositive(Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
      <summary>Makes the given span positive.</summary>
      <param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object to be modified.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.Merge(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Merges the two given spans to create a new span.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is the result of merging <paramref name="span1" /> and <paramref name="span2" />.</returns>
      <param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object to be merged.</param>
      <param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object to be merged.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.Normalize(Microsoft.VisualStudio.TextManager.Interop.TextSpan@,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Pins the ends of the given span to the actual line lengths in the given text buffer.</summary>
      <param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object to be modified. This object can be null.</param>
      <param name="textLines">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object to normalize against.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.StartsAfterEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Determines if the first span starts after the end of the second span.</summary>
      <returns>Returns true if the start of <paramref name="span1" /> is greater than or equal to the end of <paramref name="span2" />; otherwise, returns false.</returns>
      <param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
      <param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.StartsAfterStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Determines if the first span starts after the start of the second span.</summary>
      <returns>Returns true if the start of <paramref name="span1" /> is greater than or equal to the start of <paramref name="span2" />; otherwise, returns false.</returns>
      <param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
      <param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.StartsBeforeEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Determines if the first span starts before the end of the second span.</summary>
      <returns>Returns true if the start of <paramref name="span1" /> is less than the end of <paramref name="span2" />; otherwise, returns false.</returns>
      <param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
      <param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.StartsBeforeStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Determines if the first span starts before the start of the second span.</summary>
      <returns>Returns true if the start of <paramref name="span1" /> is less than the start of <paramref name="span2" />; otherwise, returns false.</returns>
      <param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
      <param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.ValidCoord(Microsoft.VisualStudio.Package.Source,System.Int32,System.Int32)">
      <summary>Determines if the given position is valid for the given source buffer.</summary>
      <returns>Returns true if the given position lies within the given source buffer; otherwise, returns false.</returns>
      <param name="src">[in] A <see cref="T:Microsoft.VisualStudio.Package.Source" /> object to validate against. This can be a null value. See Remarks.</param>
      <param name="line">[in] The line index of the position to test.</param>
      <param name="pos">[in] The column index of the position to test.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.ValidSpan(Microsoft.VisualStudio.Package.Source,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Determines if the given span lies within the given source buffer.</summary>
      <returns>Returns true if the span lies entirely within the source buffer and is positive; otherwise, returns false.</returns>
      <param name="src">[in] A <see cref="T:Microsoft.VisualStudio.Package.Source" /> object to validate against.</param>
      <param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object representing the span to test.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.#ctor(System.IServiceProvider)">
      <summary>This constructor sets a service provider.</summary>
      <param name="site">A service provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.CheckCaretPosition(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Dismisses the tool tip based on mouse proximity to something that has a tool tip.</summary>
      <param name="textView">The view the text tip floats over.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.Close(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Dismisses and releases the tool tip.</summary>
      <param name="textView">The view associated with the tool tip.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.GetContextStream(System.Int32@,System.Int32@)">
      <summary>Retrieves the position and length of the tool tip.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="piPos">The position of the tool tip.</param>
      <param name="piLen">The length of the tool tip.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.GetTipFontInfo(System.Int32,System.UInt32[])">
      <summary>Returns the font of the tool tip window.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</returns>
      <param name="iChars">Number of characters to consider.</param>
      <param name="pdwFontInfo">Pointer to a structure that describes font.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.GetTipText(System.String[],System.Int32@)">
      <summary>Populates <paramref name="pbstrText" /> with the tip text.</summary>
      <returns>If <paramref name="pbstrText" /> is NULL or has a length of zero, returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG" />, otherwise returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.</returns>
      <param name="pbstrText">The populated text tip data.</param>
      <param name="pfFontData">Font information about the provided data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.IsActive">
      <summary>Tests if the tool tip window is currently visible.</summary>
      <returns>Returns TRUE if the tool tip window is currently visible.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.OnDismiss">
      <summary>Sets the tool tip window to inactive.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.Update(System.String,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Adds the supplied data to this text tip.</summary>
      <param name="textValue">The text of the tool tip.</param>
      <param name="pos">The position of the tip.</param>
      <param name="len">The length of the tip.</param>
      <param name="textView">The <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.UpdateTipWindow(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow,System.UInt32)" /> that should be updated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TextTipData.UpdateView">
      <summary>A virtual method that your subclass of TextTipData can implement to provide extra functionality on update.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TokenInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> class to the default values.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TokenInfo.#ctor(System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> class to the specified values.</summary>
      <param name="startIndex">[in] The first character of the token.</param>
      <param name="endIndex">[in] The last character of the token.</param>
      <param name="type">[in] A value from the <see cref="T:Microsoft.VisualStudio.Package.TokenType" /> enumeration identifying the token's type.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.TokenInfo.Color">
      <summary>Determines the color index to use for the token.</summary>
      <returns>Returns a color index cast to a <see cref="T:Microsoft.VisualStudio.Package.TokenColor" /> enumeration.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.TokenInfo.EndIndex">
      <summary>Determines the index of the last character of the token.</summary>
      <returns>Returns an integer specifying the last character of the token.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.TokenInfo.StartIndex">
      <summary>Determines the index of the first character of the token.</summary>
      <returns>Returns an integer specifying the first character of the token.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.TokenInfo.Token">
      <summary>Determines the token ID as represented by the <see cref="T:Microsoft.VisualStudio.Package.TokenInfo" /> object.</summary>
      <returns>Returns an integer specifying the token ID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.TokenInfo.Trigger">
      <summary>Determines the various triggers that can be set for the token.</summary>
      <returns>Returns a combination of flags from the <see cref="T:Microsoft.VisualStudio.Package.TokenTriggers" /> enumeration.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.TokenInfo.Type">
      <summary>Determines the type of the token.</summary>
      <returns>Returns a value from the <see cref="T:Microsoft.VisualStudio.Package.TokenType" /> enumeration.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.TokenTriggers">
      <summary>Specifies a set of triggers that can be fired from an <see cref="T:Microsoft.VisualStudio.Package.IScanner" /> language parser.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenTriggers.None">
      <summary>Used when no triggers are set. This is the default.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenTriggers.MemberSelect">
      <summary>A character that indicates that the start of a member selection has been parsed. In C#, this could be a period following a class name. In XML, this could be a &lt; (the member select is a list of possible tags).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenTriggers.MatchBraces">
      <summary>The opening or closing part of a language pair has been parsed. For example, in C#, a { or } has been parsed. In XML, a &lt; or &gt; has been parsed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenTriggers.MethodTip">
      <summary>This is a mask for the flags used to govern the IntelliSense Method Tip operation. This mask is used to isolate the values <see cref="F:Microsoft.VisualStudio.Package.TokenTriggers.Parameter" />, <see cref="F:Microsoft.VisualStudio.Package.TokenTriggers.ParameterStart" />, <see cref="F:Microsoft.VisualStudio.Package.TokenTriggers.ParameterNext" />, and <see cref="F:Microsoft.VisualStudio.Package.TokenTriggers.ParameterEnd" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenTriggers.ParameterStart">
      <summary>A character that marks the start of a parameter list has been parsed. For example, in C#, this could be an open parenthesis, "(".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenTriggers.ParameterNext">
      <summary>A character that separates parameters in a list has been parsed. For example, in C#, this could be a comma, ",".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenTriggers.ParameterEnd">
      <summary>A character that marks the end of a parameter list has been parsed. For example, in C#, this could be a close parenthesis, ")".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.TokenTriggers.Parameter">
      <summary>A parameter in a method's parameter list has been parsed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.#ctor(Microsoft.VisualStudio.Package.LanguageService)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars" /> class.</summary>
      <param name="languageService">[in] A <see cref="T:Microsoft.VisualStudio.Package.LanguageService" /> object representing the language service that uses the combo boxes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.Done">
      <summary>Cleans up any allocated resources just before the <see cref="T:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars" /> object is destroyed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetComboAttributes(System.Int32,System.UInt32@,System.UInt32@,System.IntPtr@)">
      <summary>Returns information about the specified combo box.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="combo">[in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).</param>
      <param name="entries">[out] The number of entries to be shown on the combo box.</param>
      <param name="entryType">[out] A combination of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNENTRYTYPE" /> enumeration describing the type of entries to appear on the combo box.</param>
      <param name="iList">[out] An unmarshaled handle to an <see cref="T:Microsoft.CLRAdmin.IImageList" /> object used for glyphs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetComboTipText(System.Int32,System.String@)">
      <summary>Returns text to be shown in a tool tip when the cursor is held over the combo box.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="combo">[in] The ID of the combo box to get the tool tip text for (0 for the types combo box, 1 for the members combo box).</param>
      <param name="text">[out] The text to be shown in a tool tip.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetEntryAttributes(System.Int32,System.Int32,System.UInt32@)">
      <summary>Returns the font attributes for the specified entry on the specified combo box.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="combo">[in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).</param>
      <param name="entry">[in] The index of the entry for which to get the attributes.</param>
      <param name="fontAttrs">[out] Returns the collection of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR" /> enumeration for the requested entry.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetEntryImage(System.Int32,System.Int32,System.Int32@)">
      <summary>Returns the glyph index for the specified entry on the specified combo box.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="combo">[in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).</param>
      <param name="entry">[in] The index of the entry for which to get the image index.</param>
      <param name="imgIndex">[out] Returns the index in the image list to the glyph for the specified entry. Returns -1 if there is no glyph or the entry does not exist.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetEntryText(System.Int32,System.Int32,System.String@)">
      <summary>Returns the text to be displayed for the specified entry in the specified combo box.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="combo">[in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).</param>
      <param name="entry">[in] The index of the entry for which to get the text.</param>
      <param name="text">[out] Returns a string containing the text to be displayed in the combo box for the specified entry. Returns null if the entry does not exist.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetMember(System.Int32,System.Int32)">
      <summary>Returns the specified entry for the specified combo box.</summary>
      <returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" /> object describing the request entry; otherwise, returns null.</returns>
      <param name="combo">[in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).</param>
      <param name="entry">[in] The index of the entry to get.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.OnComboGetFocus(System.Int32)">
      <summary>Called when a combo box gets the focus.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="combo">[in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.OnItemChosen(System.Int32,System.Int32)">
      <summary>Called when an item is chosen from the specified combo box.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="combo">[in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).</param>
      <param name="entry">[in] The index of the entry that was chosen.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.OnItemSelected(System.Int32,System.Int32)">
      <summary>Called when an entry is highlighted in one of the combo boxes.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="combo">[in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).</param>
      <param name="index">[in] The index of the entry that was highlighted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.OnSynchronizeDropdowns(Microsoft.VisualStudio.Package.LanguageService,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,System.Collections.ArrayList,System.Collections.ArrayList,System.Int32@,System.Int32@)">
      <summary>Called to fill and synchronize all combo boxes.</summary>
      <returns>If successful, returns true if the combo boxes have been changed; otherwise returns false.</returns>
      <param name="languageService">[in] A <see cref="T:Microsoft.VisualStudio.Package.LanguageService" /> object representing the language service that uses the combo boxes.</param>
      <param name="textView">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view the combo boxes are placed in and the view that shows the source file.</param>
      <param name="line">[in] The line number the caret is currently on.</param>
      <param name="col">[in] The character offset the caret is currently on.</param>
      <param name="dropDownTypes">[in, out] An <see cref="T:System.Collections.ArrayList" /> of <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" />s representing the types combo box.</param>
      <param name="dropDownMembers">[in, out] An <see cref="T:System.Collections.ArrayList" /> of <see cref="T:Microsoft.VisualStudio.Package.DropDownMember" />s representing the members combo box.</param>
      <param name="selectedType">[in, out] The index of the entry to be selected in the types combo box. This can also be set if the current selection is invalid.</param>
      <param name="selectedMember">[in, out] The index of the entry to be selected in the members combo box. This can also be set if the current selection is invalid.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.SetDropdownBar(Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar)">
      <summary>Called to specify the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar" /> object that controls the two combo boxes.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="bar">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar" /> object that controls the two combo boxes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Variant.ToChar">
      <summary>Interprets the <see cref="T:Microsoft.VisualStudio.Package.Variant" /> object's value as a Unicode character if the variant type is <see cref="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UI2" />.</summary>
      <returns>If the variant type is <see cref="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UI2" />, returns the value interpreted as a character; otherwise, returns 0.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Package.Variant.ToVariant(System.IntPtr)">
      <summary>Converts the given variant object to a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> class object.</summary>
      <returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.Variant" /> object containing the value of the marshaled variant object; otherwise, returns an empty <see cref="T:Microsoft.VisualStudio.Package.Variant" /> object.</returns>
      <param name="ptr">[in] An <see cref="T:System.IntPtr" /> to be marshaled as a variant object.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Variant.Value">
      <summary>Determines the value of this <see cref="T:Microsoft.VisualStudio.Package.Variant" /> object.</summary>
      <returns>Returns a number that is a literal interpretation of the object's pointer.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.Variant.Vt">
      <summary>Determines the type of the <see cref="T:Microsoft.VisualStudio.Package.Variant" /> object.</summary>
      <returns>Returns a value from the <see cref="T:Microsoft.VisualStudio.Package.Variant.VariantType" /> enumeration, specifying the type of the variant.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.Variant.VariantType">
      <summary>Specifies the type of a variant object as used by a managed package framework (MPF) language service class.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_EMPTY">
      <summary>An empty variant.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_NULL">
      <summary>A null value.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_I2">
      <summary>A 2 byte (16-bit) signed integer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_I4">
      <summary>A 4 byte (32-bit) signed integer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_R4">
      <summary>A 4 byte real number, also known as a float.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_R8">
      <summary>An 8 byte real number, also known as a double.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_CY">
      <summary>A Currency value (fixed decimal point value stored in 64-bits).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_DATE">
      <summary>A DATE object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_BSTR">
      <summary>A string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_DISPATCH">
      <summary>An object that implements the <see cref="F:System.Runtime.InteropServices.UnmanagedType.IDispatch" /> interface.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_ERROR">
      <summary>An error code (typically returned from a Win32 function).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_BOOL">
      <summary>A value representing true (-1) or false (0).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_VARIANT">
      <summary>A reference to a variant object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UNKNOWN">
      <summary>An object implementing the <see cref="T:IUnknown" /> interface.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_DECIMAL">
      <summary>A decimal number stored as a string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_I1">
      <summary>A 1 byte (8-bit) signed integer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UI1">
      <summary>A 1 byte (8-bit) unsigned integer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UI2">
      <summary>A 2 byte (16-bit) unsigned integer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UI4">
      <summary>A 4 byte (32-bit) unsigned integer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_I8">
      <summary>An 8 byte (64-bit) signed integer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UI8">
      <summary>An 8 byte (64-bit) unsigned integer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_INT">
      <summary>A generic integer (typically a 32-bit value).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UINT">
      <summary>A generic unsigned integer (typically 32-bits).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_VOID">
      <summary>A C-style void type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_HRESULT">
      <summary>An HRESULT or COM return value.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_PTR">
      <summary>A generic pointer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_SAFEARRAY">
      <summary>An array that is guaranteed to be at least empty (that is, it is never a null value).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_CARRAY">
      <summary>A C-style array (an array of pointers).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_USERDEFINED">
      <summary>A user-defined blob.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_LPSTR">
      <summary>A pointer to a null-terminated ANSI string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_LPWSTR">
      <summary>A pointer to a null-terminated wide character (Unicode) string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_FILETIME">
      <summary>A <see cref="T:System.Runtime.InteropServices.FILETIME" /> value.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_BLOB">
      <summary>An arbitrary block of memory.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_STREAM">
      <summary>A stream of bytes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_STORAGE">
      <summary>Name of the storage.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_STREAMED_OBJECT">
      <summary>A stream that contains an object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_STORED_OBJECT">
      <summary>A storage object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_BLOB_OBJECT">
      <summary>An arbitrary block of memory representing an object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_CF">
      <summary>A value specifying a clipboard format.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_CLSID">
      <summary>A GUID for a class (a CLSID).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_VECTOR">
      <summary>An array with a leading count value.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_ARRAY">
      <summary>An array of variants.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_BYREF">
      <summary>A reference to an object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_RESERVED">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_ILLEGAL">
      <summary>Represents an illegal variant type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_ILLEGALMASKED">
      <summary>A bit mask to isolate valid variant types.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_TYPEMASK">
      <summary>A bit mask to isolate valid variant types.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Package.ViewFilter">
      <summary>This class handles various editing and IntelliSense commands for a language service.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Package.ViewFilter.IsExecutingCommand"></member>
    <member name="M:Microsoft.VisualStudio.Package.ViewFilter.ShowContextMenu(System.Int32,System.Guid,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,System.Int32,System.Int32)"></member>
  </members>
</doc>